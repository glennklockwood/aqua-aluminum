"""Fixes tables generated by Python-Markdown
"""

import os
import re

import pelican
import bs4

#: Default classes to apply to all ``<table>`` tags
DEFAULT_TABLE_CLASSES = ["table", "table-sm", "table-striped", "table-bordered"]

def fix_md_table(html, add_table_classes=DEFAULT_TABLE_CLASSES):
    """Correct problems in tables generated by Python-Markdown

    Python-Markdown has two major limitations:

    1. It uses the "align" attribute instead of "style" to set text alignment;
       not only is this the old way of styling tables, but it is incompatible
       with Bootstrap since bootstrap4 sets ``text-align: inherit`` for the
       ``th`` tag but not ``td``.
    2. It actively rejects providing any means to assign classes to the tables
       it generates (see https://github.com/Python-Markdown/markdown/issues/312).
       This is also incompatible with Bootstrap tables, which are opt-in.

    This method traverses the HTML generated by Python-Markdown and fixes these
    two issues by (1) converting ``align`` attributes to ``style="text-align"``
    and (2) adding user-specified classes to the table object.

    Args:
        html (str): The HTML generated by Python-Markdown
        add_table_classes (list of str): Any classes that should be applied to
            all ``<table>`` tags encountered

    Returns:
        str: The input HTML with tables modified to reflect the aforementioned
        modifications.
    """
    changes = 0
    soup = bs4.BeautifulSoup(html, 'html.parser')
    for table in soup.find_all("table"):
        if add_table_classes:
            # do not style codehilite tables (numbered lines of code)
            if 'codehilitetable' in table.get('class', []):
                continue
            table['class'] = table.get('class', []) + add_table_classes
            changes += 1

        for thead in table.find_all("thead"):
            for trow in thead.find_all("tr"):
                for thdata in trow.find_all("th"):
                    if 'align' in thdata.attrs:
                        if 'style' not in thdata.attrs:
                            thdata['style'] = ""
                        thdata['style'] += "text-align: %s;" % thdata.attrs['align']
                        del thdata.attrs['align']
                        changes += 1

        for tbody in table.find_all("tbody"):
            for trow in tbody.find_all("tr"):
                for tdata in trow.find_all("td"):
                    if 'align' in tdata.attrs:
                        if 'style' not in tdata.attrs:
                            tdata['style'] = ""
                        tdata['style'] += "text-align: %s;" % tdata.attrs['align']
                        del tdata.attrs['align']
                        changes += 1

    return str(soup), changes

def fix_md_tables(pelican_obj):
    """Replaces limelead datatable shortcodes in a pelican page with an HTML
    rendered table.

    Args:
        pelican_obj: A pelican object (usually a page) that has a `_content`
        attribute containing rendered HTML

    Returns:
        str: HTML containing fixed tables that have been processed with fix_md_table()
    """
    html, changes = fix_md_table(pelican_obj._content)
    #if changes:
    #    print("Altered %d tag(s) in %s" % (changes, pelican_obj.source_path))

    return html

def reformat_plaintables(content_object):
    if not content_object._content:
        return
    content_object._content = fix_md_tables(content_object)

def register():
    pelican.signals.content_object_init.connect(reformat_plaintables)
